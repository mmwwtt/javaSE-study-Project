
面向对象(OOP)的四大特征
	抽象：只关注对象有哪些行为，不关注细节
	封装：将类包装起来，保留对外接口；不必了解类内部具体细节，减少耦合，对成员控制更精准
	继承：在已存在的类上建立新的类；提高开发效率
	多态:
		利用覆盖来实现，子类覆盖父类的方法
		利用重载来实现多态，即一个类中定义多个同名的不同方法来实现多态
创建对象
	new：会用到构造方法
	序列化对象
	反射：会用到构造方法
	克隆

继承
		子类可以继承父类的所有成员，但是对private修饰的无访问权限
构造函数
	对象被创建时会被调用(有默认的)。构造函数重载，每个构造函数有自己的参数表
泛型
	参数化类型，将类型也定义为形参，方法中使用同一类型  List<String>
	
初始化过程
	初始化父类的静态成员变量和静态代码块
	初始化子类的静态成员变量和静态代码块
	初始化父类的普通成员变量和代码块，再执行父类的构造方法
	初始化子类的普通成员变量和代码快，再执行子类的构造方法
	
重写(override)和重载(overload)
	重写：子类对父类的方法重新编写
		方法名，返回值和形参都不能改变,
		访问修饰符 子类>=父类
		static方法不能被重写
	重载：一个类中，方法名字相同，参数不同
	
final
	该类不能被继承，不能被改写，定义常量PI等，安全
	final对象存在时，必须初始化，或者在构造函数中赋值
	
this用法
		1.当成员变量和局部变量重名时，使用this表示类中的成员变量
		2.
		
抽象类和接口
		都不能实例化
	抽象类
		有实现的/抽象的方法
		可以有各种类型的变量
		可以有静态方法和静态代码块
		单继承
	接口
		只有抽象方法
		变量(默认,可省略)：public static final;
		方法(默认,可省略)：public abstract;
		继承多个接口
			interface Hockey extends Sports, Event
		实现多个接口
			class  A implements  B，C
	
inner Class（内部类）
	定义在类内部的类
	内部类可以访问外部类的属性，如果是static，那么只能访问外部类的static属性
	外部类不能直接访问内部类的元素，要先创建内部类对象
	内部类
		成员内部类
		局部内部类
		匿名内部类
		静态内部类
	内部类有四种访问权限
	
子类构造函数调用父类构造函数,用super
子类重写父类方法后，若想调用父类中被重写的方法，用super
未被重写的方法可以直接调用

只有在无构造函数的时候才会有默认构造函数
有参构造函数时，生成实例对象一定要带参数
final声明的方法不能被覆盖，父类的private方法不会被继承
当使用多态的时候
	Parent p = new Child();
	多态调用方法时，先查看父类中是否有该方法，如果没有则报错，如果有，再去调用子类的同名方法
protected
	只能被同包下的类访问，如果不在一个包下，必须是其子类才能访问
父类/子类(基类/派生类)